"""
Django settings for api_DaveIsTheBest project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from configparser import RawConfigParser

parser = RawConfigParser(allow_no_value=True)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
LOCAL_SETTINGS_FILE = BASE_DIR.parent / "api_DaveIsTheBest_settings.ini"
parser.read(LOCAL_SETTINGS_FILE)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = parser.get("secrets", "SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = parser.getboolean("debug", "DEBUG")
PRODUCTION = parser.getboolean("production","PRODUCTION")

ALLOWED_HOSTS = parser.get("hosts", "ALLOWED_HOSTS").split(",")

BASE_APP = "base_app"
AUTH_USER_MODEL = BASE_APP + ".User"

INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "corsheaders",
    "rest_framework",
    "djoser",
    "base_app",
    "comments",
    "interval_timer",
    "live_chat_webRTC",
    "file_sharing",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "djangorestframework_camel_case.middleware.CamelCaseMiddleWare",
]

ROOT_URLCONF = "api_DaveIsTheBest.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "api_DaveIsTheBest.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": parser.get("database", "DATABASE_ENGINE"),
        "NAME": parser.get("database", "DATABASE_NAME"),
        "USER": parser.get("database", "DATABASE_USER"),
        "PASSWORD": parser.get("database", "DATABASE_PASSWORD"),
        "HOST": parser.get("database", "DATABASE_HOST"),
        "PORT": parser.getint("database", "DATABASE_PORT"),
        "OPTIONS": {"init_command": "SET sql_mode='STRICT_TRANS_TABLES'"},
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

if PRODUCTION:
    STATIC_URL = parser.get("STATIC","STATIC_URL")
    MEDIA_URL = parser.get("MEDIA", "MEDIA_URL")
    MEDIA_ROOT = parser.get("MEDIA", "MEDIA_ROOT")
else:
    STATIC_URL = "static/"
    MEDIA_URL = "media/"
    MEDIA_ROOT = BASE_DIR / "media"

STATIC_ROOT = BASE_DIR / "static"

EMAIL_BACKEND = parser.get("email", "EMAIL_BACKEND")
DEFAULT_FROM_EMAIL = parser.get("email", "DEFAULT_FROM_EMAIL")
EMAIL_HOST = parser.get("email", "EMAIL_HOST")
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = parser.get("email", "EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = parser.get("email", "EMAIL_HOST_PASSWORD")

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseFormParser",
        "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
}

SIMPLE_JWT = {
    "AUTH_HEADER_TYPES": ("JWT",),
}

DOMAIN = parser.get("DJOSER","DOMAIN") #ONLY NEEDED FOR DJOSER CONFIRMATION EMAIL

DJOSER = {
    "SERIALIZERS": {
        "user_create": "base_app.serializers.UserCreateSerializer",
        "current_user": "base_app.serializers.UserSerializer",
        "user": "base_app.serializers.UserSerializer",
    },
    "SEND_ACTIVATION_EMAIL": True,
    "ACTIVATION_URL": parser.get("DJOSER", "ACTIVATION_URL"),
    'PASSWORD_RESET_CONFIRM_URL': parser.get("DJOSER", "PASSWORD_RESET_CONFIRM_URL"),
}

CORS_ALLOWED_ORIGINS = parser.get("CORS", "CORS_ALLOWED_ORIGINS").split(",")
CSRF_TRUSTED_ORIGINS = parser.get("CSRF", "CSRF_TRUSTED_ORIGINS").split(",")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

if not PRODUCTION:
    INSTALLED_APPS.append("debug_toolbar")
    MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")